class Solution {
    public void solveSudoku(char[][] board) {
        solveSudokuHelper(board);
        display(board);
    }

    public boolean solveSudokuHelper(char[][] board) {
        int row = -1;
        int col = -1;
        boolean isEmpty = true;
        
        // Find the first empty cell
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] == '.') {
                    row = i;
                    col = j;
                    isEmpty = false;
                    break;
                }
            }
            if (!isEmpty) {
                break;
            }
        }
        
        // If there are no empty cells left, the sudoku is solved
        if (isEmpty) {
            return true;
        }
        
        // Try filling the empty cell with values from '1' to '9'
        for (char num = '1'; num <= '9'; num++) {
            if (isValidMove(board, row, col, num)) {
                board[row][col] = num;
                if (solveSudokuHelper(board)) {
                    return true;
                }
                board[row][col] = '.'; // Backtrack
            }
        }
        return false;
    }

    public boolean isValidMove(char[][] board, int row, int col, char num) {
        // Check if the number is not present in the row
        for (int i = 0; i < 9; i++) {
            if (board[row][i] == num) {
                return false;
            }
        }
        
        // Check if the number is not present in the column
        for (int i = 0; i < 9; i++) {
            if (board[i][col] == num) {
                return false;
            }
        }
        
        // Check if the number is not present in the 3x3 subgrid
        int startRow = row - row % 3;
        int startCol = col - col % 3;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i + startRow][j + startCol] == num) {
                    return false;
                }
            }
        }
        
        return true;
    }

    public void display(char[][] board) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
    }
}
